{
B=matrix(random_coefmats2(p=1,d=dimen*nprocesos),dimen*nprocesos,dimen*nprocesos)
eigenvals=eigen(B)$values
modeigenvals=Mod(eigenvals)
if(all(modeigenvals<1 )){pasa=1}
}
#B=matrix(c(-0.64723577,  0.006816465,  0.25235409,  0.5630504,-0.37087077, -0.167652258 , 0.24979271, -0.5602723,-0.04500939, -0.766879220, -0.03213705,  0.1902451,-0.32275761, -0.026207818,  0.03205449, -0.3393524),K,K,byrow=TRUE)
library(ks)
Gamma0Var1=ks::invvec(solve(diag(K*K)-kronecker(B,B))%*%ks::vec(sigmaruido),K,K)
isSymmetric(Gamma0Var1)
GammaVar1=array(rep(0,N*K*K),dim=c(K,K,N))
GammaVar1[,,1]=Gamma0Var1
for(j in 2:N)
{
GammaVar1[,,j]=B%*%GammaVar1[,,j-1]
}
GammaVar1[,,100]
dim(GammaVar1)
setVariable(matlab,Matriz_Prueba=GammaVar1)
evaluate(matlab,"dimension=size(Matriz_Prueba)")
#evaluate(matlab,"dimension=size(Matriz_Prueba)")
evaluate(matlab,"[X,W,C,Xbis]=AjusteSyntCircMul(Matriz_Prueba,100);")
simul_process$X
dim(simul_process$X)
#evaluate(matlab,"dimension=size(Matriz_Prueba)")
evaluate(matlab,"[X,W,C,Xbis]=AjusteSyntCircMul(Matriz_Prueba,100);")
simul_process=getVariable(matlab,"X")
simul_process$X
dim(simul_process$X)
simul_process$X[,1]
GammaVar1
random_coefmats2 <- function(p, d, ar_scale=1) {
# First generate matrices P_1,..,P_p with singular values less than one
stopifnot(ar_scale > 0)
Id <- diag(nrow=d)
all_P <- array(dim=c(d, d, p))
for(i1 in 1:p) {
A <- matrix(rnorm(d*d, sd=ar_scale), nrow=d)
B <- t(chol(Id + tcrossprod(A, A)))
all_P[, , i1] <- solve(B, A)
}
all_phi <- array(dim=c(d, d, p, p)) # [ , , i, j] for phi_{i, j}
all_phi_star <- array(dim=c(d, d, p, p)) # [ , , i, j] for phi_{i, j}*
# Set initial values
L <- L_star <- Sigma <- Sigma_star <- Gamma <- Id
# Recursion algorithm (Ansley and Kohn 1986, lemma 2.1)
for(s in 0:(p-1)) {
all_phi[, , s+1, s+1] <- L%*%all_P[, , s+1]%*%solve(L_star)
all_phi_star[, , s+1, s+1] <- tcrossprod(L_star, all_P[, , s+1])%*%solve(L)
if(s >= 1) {
for(k in 1:s) {
all_phi[, , s+1, k] <- all_phi[, , s, k] - all_phi[, , s+1, s+1]%*%all_phi_star[, , s, s-k+1]
all_phi_star[, , s+1, k] <- all_phi_star[, , s, k] - all_phi_star[, , s+1, s+1]%*%all_phi[, , s, s-k+1]
}
}
if(s < p-1) { # These are not needed in the last round because only coefficient matrices will be returned.
Sigma_next <- Sigma - all_phi[, , s+1, s+1]%*%tcrossprod(Sigma_star, all_phi[, , s+1, s+1])
if(s < p+1) {
Sigma_star <- Sigma_star - all_phi_star[, , s+1, s+1]%*%tcrossprod(Sigma, all_phi_star[, , s+1, s+1])
L_star <- t(chol(Sigma_star))
}
Sigma <- Sigma_next
L <- t(chol(Sigma))
}
}
all_A <- all_phi[, , p, 1:p]
return(as.vector(all_A))
}
####Ejemplo Covarianza Teórica VAR(1)
dimen=15
nprocesos=2
pasa=0
###B es la matriz de coeficientes autoregresivos
K=dimen*nprocesos
var=1
sigmaruido=diag(var,K)
N=200
while(pasa==0)
{
B=matrix(random_coefmats2(p=1,d=dimen*nprocesos),dimen*nprocesos,dimen*nprocesos)
eigenvals=eigen(B)$values
modeigenvals=Mod(eigenvals)
if(all(modeigenvals<1 )){pasa=1}
}
#B=matrix(c(-0.64723577,  0.006816465,  0.25235409,  0.5630504,-0.37087077, -0.167652258 , 0.24979271, -0.5602723,-0.04500939, -0.766879220, -0.03213705,  0.1902451,-0.32275761, -0.026207818,  0.03205449, -0.3393524),K,K,byrow=TRUE)
library(ks)
Gamma0Var1=ks::invvec(solve(diag(K*K)-kronecker(B,B))%*%ks::vec(sigmaruido),K,K)
isSymmetric(Gamma0Var1)
GammaVar1=array(rep(0,N*K*K),dim=c(K,K,N))
GammaVar1[,,1]=Gamma0Var1
for(j in 2:N)
{
GammaVar1[,,j]=B%*%GammaVar1[,,j-1]
}
GammaVar1[,,100]
library(R.matlab)
options(matlab="/Applications/MATLAB_R2020b.app/bin/matlab")   ####Opcional
Matlab$startServer()
matlab <- Matlab()
isOpen <- open(matlab)
setVariable(matlab,Matriz_Prueba=GammaVar1)
#evaluate(matlab,"dimension=size(Matriz_Prueba)")
evaluate(matlab,"[X,W,C,Xbis]=AjusteSyntCircMul(Matriz_Prueba,100);")
#evaluate(matlab,"dimension=size(Matriz_Prueba)")
evaluate(matlab,"[X,W,C,Xbis]=AjusteSyntCircMul(Matriz_Prueba,200);")
N=199
while(pasa==0)
{
B=matrix(random_coefmats2(p=1,d=dimen*nprocesos),dimen*nprocesos,dimen*nprocesos)
eigenvals=eigen(B)$values
modeigenvals=Mod(eigenvals)
if(all(modeigenvals<1 )){pasa=1}
}
#B=matrix(c(-0.64723577,  0.006816465,  0.25235409,  0.5630504,-0.37087077, -0.167652258 , 0.24979271, -0.5602723,-0.04500939, -0.766879220, -0.03213705,  0.1902451,-0.32275761, -0.026207818,  0.03205449, -0.3393524),K,K,byrow=TRUE)
library(ks)
Gamma0Var1=ks::invvec(solve(diag(K*K)-kronecker(B,B))%*%ks::vec(sigmaruido),K,K)
isSymmetric(Gamma0Var1)
GammaVar1=array(rep(0,N*K*K),dim=c(K,K,N))
GammaVar1[,,1]=Gamma0Var1
for(j in 2:N)
{
GammaVar1[,,j]=B%*%GammaVar1[,,j-1]
}
GammaVar1[,,100]
GammaVar1cell=matrix(list(),4,4)
####Fila 1
GammaVar1cell[[1,1]]=GammaVar1[1,1,1:100]
GammaVar1cell[[1,2]]=GammaVar1[1,2,1:100]
GammaVar1cell[[1,3]]=GammaVar1[1,3,1:100]
setVariable(matlab,Matriz_Prueba=GammaVar1)
#evaluate(matlab,"dimension=size(Matriz_Prueba)")
evaluate(matlab,"[X,W,C,Xbis]=AjusteSyntCircMul(Matriz_Prueba,200);")
R.Version()
knitr::opts_chunk$set(echo = TRUE)
r1=read.table("w-gs1yr.txt",header=T)[,4]
r3=read.table("w-gs3yr.txt",header=T)[,4]
head(r1)
head(r3)
str(r1)
r1=read.table("w-gs1yr.txt",header=T)[,4]
r3=read.table("w-gs3yr.txt",header=T)[,4]
head(r1)
head(r3)
str(r1)
tsr1=ts(r1,start=1962+5/365.25,frequency=365.25/7)
tsr3=ts(r3,start=1962+5/365.25,frequency=365.25/7)
ts.plot(tsr1,tsr3, gpars = list(col = c("black", "red")),ylab="porcentaje")
legend("topright", legend=c("tsr1", "tsr3"),
col=c("black", "red"), lty=1, cex=0.8)
str(tsr1)
tsc1=diff(tsr1)
tsc3=diff(tsr3)
ts.plot(tsc1,tsc3, gpars = list(col = c("black", "red")),ylab="porcentaje")
legend("topright", legend=c("tsc1", "tsc3"),
col=c("black", "red"), lty=1, cex=0.8)
par(mfrow=c(1,2))
plot(r1,r3,type='p',pch=16,sub = "(a) Variables Originales")
plot(tsc1,tsc3,type='p',pch=16,sub="(b) Variables en Cambios")
m1=lm(r3~r1)
summary(m1)
###Residuales del modelo
plot(m1$residuals,type='l')
acf(m1$residuals,lag=36)
m2=lm(tsc3 ~ -1+tsc1)
summary(m2)
plot(m2$residuals,type='l')
acf(m2$residuals,lag.max =36,ci.type="ma")
pacf(m2$residuals,lag.max =36)
m3=arima(tsc3,order=c(0,0,1),xreg=tsc1,include.mean=F)
m3
library(lmtest)
coeftest(m3)
plot(m3$residuals)
acf(m3$residuals,lag.max = 36)
r1=read.table("w-gs1yr.txt",header=T)[,4]
r3=read.table("w-gs3yr.txt",header=T)[,4]
head(r1)
head(r3)
str(r1)
tsr1=ts(r1,start=1962+5/365.25,frequency=365.25/7)
tsr3=ts(r3,start=1962+5/365.25,frequency=365.25/7)
ts.plot(tsr1,tsr3, gpars = list(col = c("black", "red")),ylab="porcentaje")
legend("topright", legend=c("tsr1", "tsr3"),
col=c("black", "red"), lty=1, cex=0.8)
str(tsr1)
tsc1=diff(tsr1)
tsc3=diff(tsr3)
ts.plot(tsc1,tsc3, gpars = list(col = c("black", "red")),ylab="porcentaje")
legend("topright", legend=c("tsc1", "tsc3"),
col=c("black", "red"), lty=1, cex=0.8)
par(mfrow=c(1,2))
plot(r1,r3,type='p',pch=16,sub = "(a) Variables Originales")
plot(tsc1,tsc3,type='p',pch=16,sub="(b) Variables en Cambios")
m1=lm(r3~r1)
summary(m1)
###Residuales del modelo
plot(m1$residuals,type='l')
acf(m1$residuals,lag=36)
m2=lm(tsc3 ~ -1+tsc1)
summary(m2)
plot(m2$residuals,type='l')
acf(m2$residuals,lag.max =36,ci.type="ma")
pacf(m2$residuals,lag.max =36)
m3=arima(tsc3,order=c(0,0,1),xreg=tsc1,include.mean=F)
m3
library(lmtest)
coeftest(m3)
plot(m3$residuals)
acf(m3$residuals,lag.max = 36)
data("chicken")
install.packages("astsa")
data("chicken")
data(chicken)
install.packages("astsa")
library(astsa)
data(chicken)
knitr::opts_chunk$set(echo = TRUE)
library(TSstudio)
ts_info(chicken)
plot.ts(chicken)
plot_ts(chicken)
ts_plot(chicken)
library(astsa)
library(TSstudio)
data(chicken)
ts_info(chicken)
plot.ts(chicken)
#ts_plot(chicken)
summary(fit <- lm(chicken~time(chicken), na.action=NULL))
summary(fit <- lm(chicken~time(chicken), na.action=NULL))
plot(chicken, ylab="cents per pound") abline(fit) # add the fitted line
summary(fit <- lm(chicken~time(chicken), na.action=NULL))
plot(chicken, ylab="cents per pound")
abline(fit) # add the fitted line
summary(fit <- lm(chicken~time(chicken), na.action=NULL))
plot(chicken, ylab="cents per pound")
abline(fit) # Se añade la recta ajusta
?abline
summary(fit <- lm(chicken~time(chicken), na.action=NULL))
plot(chicken, ylab="cents per pound")
abline(fit,col = "gray60") # Se añade la recta ajusta
summary(fit <- lm(chicken~time(chicken), na.action=NULL))
plot(chicken, ylab="cents per pound")
abline(fit,col = "red") # Se añade la recta ajusta
?chicken
plot.ts(chicken)
plot.ts(chicken,main="Precio Mensual de la Libra de Pollo en Estados Unidos", ylab="Precio en Centavos de Dólar")
library(astsa)
library(TSstudio)
data(chicken)
ts_info(chicken)
plot.ts(chicken,main="Precio Mensual de la Libra de Pollo en Estados Unidos", ylab="Precio en Centavos de Dólar")
#ts_plot(chicken)
library(astsa)
library(TSstudio)
data(chicken)
ts_info(chicken)
plot(chicken,main="Precio Mensual de la Libra de Pollo en Estados Unidos", ylab="Precio en Centavos de Dólar")
#ts_plot(chicken)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(knitr)
fit
predict(fit)
knitr::opts_chunk$set(echo = TRUE)
###Eliminamos la tendencia con la predicción la recta
ElimiTendchick=chicken-predict(fit)
ElimiTendchick
plot(ElimiTendchick,main="Serie Chicken Sin tendencia")
fit = lm(chicken~time(chicken), na.action=NULL) # Regresión sobre el tiempo
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="sin tendencia")
plot(diff(chicken), type="o", main="Primera Diferencia")
par(mfrow=c(3,1)) # plot ACFs
acf(chicken, 48, main="Pollo")
acf(resid(fit), 48, main="Sin tendencia")
acf(diff(chicken), 48, main="Primera Diferencia")
plot(ElimiTendchick,main="Serie Chicken Sin tendencia")
data("AirPassengers")
Ts_info(AirPassengers)
ts_info(AirPassengers)
library(TSstudio)
ts_info(AirPassengers)
summary(fit <- lm(AirPassengers~time(AirPassengers), na.action=NULL))
plot(chicken, ylab="pasajeros")
abline(fit,col = "red")
plot(AirPassengers, ylab="pasajeros")
abline(fit,col = "red")
summary(fit <- lm(chicken~time(chicken), na.action=NULL))
plot(chicken, ylab="centavos por libra")
abline(fit,col = "red") # Se añade la recta ajusta
###Eliminamos la tendencia con la predicción la recta
ElimiTendchick=chicken-predict(fit)
plot(ElimiTendchick,main="Serie Chicken Sin tendencia")
set.seed(154)
w = rnorm(200); x = cumsum(w)
wd = w +.2; xd = cumsum(wd)
plot.ts(xd, ylim=c(-5,55), main="Caminata Aletoria", ylab='')
lines(x, col=4); abline(h=0, col=4, lty=2); abline(a=0, b=.2, lty=2)
set.seed(154)
w = rnorm(200); x = cumsum(w)
wd = w -.2; xd = cumsum(wd)
plot.ts(xd, ylim=c(-5,55), main="Caminata Aletoria", ylab='')
lines(x, col=4); abline(h=0, col=4, lty=2); abline(a=0, b=-.2, lty=2)
set.seed(154)
w = rnorm(200); x = cumsum(w)
wd = w +.2; xd = cumsum(wd)
plot.ts(xd, ylim=c(-5,55), main="Caminata Aletoria", ylab='')
lines(x, col=4); abline(h=0, col=4, lty=2); abline(a=0, b=.2, lty=2)
plot.ts(xd, ylim=c(-5,55), main="Caminata Aletoria", ylab='')
lines(x, col=4); abline(h=0, col=4, lty=2); abline(a=0, b=.2, lty=2)
w = rnorm(200); x = cumsum(w)
wd = w +.2; xd = cumsum(wd)
plot.ts(xd, ylim=c(-5,55), main="Caminata Aletoria", ylab='')
lines(x, col=4); abline(h=0, col=4, lty=2); abline(a=0, b=.2, lty=2)
w = rnorm(200); x = cumsum(w)
wd = w +.2; xd = cumsum(wd)
plot.ts(xd, ylim=c(-5,55), main="Caminata Aletoria", ylab='')
lines(x, col=4); abline(h=0, col=4, lty=2); abline(a=0, b=.2, lty=2)
install.packages("bookdown")
library(bookdown)
w = rnorm(200); x = cumsum(w)
wd = w +.2; xd = cumsum(wd)
plot.ts(xd, ylim=c(-5,55), main="Caminata Aletoria", ylab='')
lines(x, col=4); abline(h=0, col=4, lty=2); abline(a=0, b=.2, lty=2)
set.seed(154)
w = rnorm(200); x = cumsum(w)
wd = w +.2; xd = cumsum(wd)
plot.ts(xd, ylim=c(-5,55), main="Caminata Aletoria", ylab='')
lines(x, col=4); abline(h=0, col=4, lty=2); abline(a=0, b=.2, lty=2)
fit = lm(chicken~time(chicken), na.action=NULL) # Regresión sobre el tiempo
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="sin tendencia")
knitr::opts_chunk$set(echo = TRUE)
library(TSstudio)
data(USUnRate)
ts_info(USUnRate)
plot(USUnRate,main = "US Monthly Unemployment Rate",ylab="Unemployment Rate (%)")
# unemployment <- window(USUnRate, start = c(1990,1))
#   ts_plot(unemployment,
#           title = "US Monthly Unemployment Rate",
#           Ytitle = "Unemployment Rate (%)",
#           Xtitle = "Year",
#           Xgrid = TRUE,
#Ygrid = TRUE)
library(readxl)
library(tidyverse)
DesempleoyEmpleo <- read_excel("DesempleoyEmpleo.xlsx", range="A9:C249")
str(DesempleoyEmpleo)
DesempleoyEmpleo_1=DesempleoyEmpleo %>% map_df(rev)
tail(DesempleoyEmpleo)
head(DesempleoyEmpleo_1)
library(zoo)
library(xts)
Fechas=as.yearmon(DesempleoyEmpleo_1$Fecha)
Desempleo_Col_xts=xts(x = DesempleoyEmpleo_1$Tasadedesempleo,frequency = 12,
order.by = Fechas)
ts_info(Desempleo_Col_xts)
plot(Desempleo_Col_xts)
#ts_plot(Desempleo_Col_xts,
#           title = "Tasa de Desemplo Mensual Colombia",
#           Ytitle = "Tasa de Desempleo(%)",
#           Xtitle = "Año",
#           Xgrid = TRUE,
#Ygrid = TRUE)
library(astsa)
library(TSstudio)
data(chicken)
ts_info(chicken)
plot(chicken,main="Precio Mensual de la Libra de Pollo en Estados Unidos", ylab="Precio en Centavos de Dólar")
#ts_plot(chicken)
summary(fit <- lm(chicken~time(chicken), na.action=NULL))
plot(chicken, ylab="centavos por libra")
abline(fit,col = "red") # Se añade la recta ajusta
###Eliminamos la tendencia con la predicción la recta
ElimiTendchick=chicken-predict(fit)
plot(ElimiTendchick,main="Serie Chicken Sin tendencia")
set.seed(154)
w = rnorm(200); x = cumsum(w)
wd = w +.2; xd = cumsum(wd)
plot.ts(xd, ylim=c(-5,55), main="Caminata Aletoria", ylab='')
lines(x, col=4); abline(h=0, col=4, lty=2); abline(a=0, b=.2, lty=2)
fit = lm(chicken~time(chicken), na.action=NULL) # Regresión sobre el tiempo
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="sin tendencia")
plot(diff(chicken), type="o", main="Primera Diferencia")
par(mfrow=c(3,1)) # plot ACFs
acf(chicken, 48, main="Pollo")
acf(resid(fit), 48, main="Sin tendencia")
acf(diff(chicken), 48, main="Primera Diferencia")
par(mfrow=c(3,1)) # plot ACFs
acf(chicken, 48, main="Pollo")
acf(resid(fit), 48, main="Sin tendencia")
acf(diff(chicken), 48, main="Primera Diferencia")
x11()
install.packages("XQuartz")
knitr::opts_chunk$set(echo = TRUE)
library(TSstudio)
data(USUnRate)
ts_info(USUnRate)
plot(USUnRate,main = "US Monthly Unemployment Rate",ylab="Unemployment Rate (%)")
# unemployment <- window(USUnRate, start = c(1990,1))
#   ts_plot(unemployment,
#           title = "US Monthly Unemployment Rate",
#           Ytitle = "Unemployment Rate (%)",
#           Xtitle = "Year",
#           Xgrid = TRUE,
#Ygrid = TRUE)
library(readxl)
library(tidyverse)
DesempleoyEmpleo <- read_excel("DesempleoyEmpleo.xlsx", range="A9:C249")
str(DesempleoyEmpleo)
DesempleoyEmpleo_1=DesempleoyEmpleo %>% map_df(rev)
tail(DesempleoyEmpleo)
head(DesempleoyEmpleo_1)
library(zoo)
library(xts)
Fechas=as.yearmon(DesempleoyEmpleo_1$Fecha)
Desempleo_Col_xts=xts(x = DesempleoyEmpleo_1$Tasadedesempleo,frequency = 12,
order.by = Fechas)
ts_info(Desempleo_Col_xts)
plot(Desempleo_Col_xts)
#ts_plot(Desempleo_Col_xts,
#           title = "Tasa de Desemplo Mensual Colombia",
#           Ytitle = "Tasa de Desempleo(%)",
#           Xtitle = "Año",
#           Xgrid = TRUE,
#Ygrid = TRUE)
library(astsa)
library(TSstudio)
data(chicken)
ts_info(chicken)
plot(chicken,main="Precio Mensual de la Libra de Pollo en Estados Unidos", ylab="Precio en Centavos de Dólar")
#ts_plot(chicken)
summary(fit <- lm(chicken~time(chicken), na.action=NULL))
plot(chicken, ylab="centavos por libra")
abline(fit,col = "red") # Se añade la recta ajusta
###Eliminamos la tendencia con la predicción la recta
ElimiTendchick=chicken-predict(fit)
plot(ElimiTendchick,main="Serie Chicken Sin tendencia")
set.seed(154)
w = rnorm(200); x = cumsum(w)
wd = w +.2; xd = cumsum(wd)
plot.ts(xd, ylim=c(-5,55), main="Caminata Aletoria", ylab='')
lines(x, col=4); abline(h=0, col=4, lty=2); abline(a=0, b=.2, lty=2)
fit = lm(chicken~time(chicken), na.action=NULL) # Regresión sobre el tiempo
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="sin tendencia")
plot(diff(chicken), type="o", main="Primera Diferencia")
par(mfrow=c(3,1)) # plot ACFs
acf(chicken, 48, main="Pollo")
acf(resid(fit), 48, main="Sin tendencia")
acf(diff(chicken), 48, main="Primera Diferencia")
install.packages("grDevices")
x11()
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="sin tendencia")
plot(diff(chicken), type="o", main="Primera Diferencia")
quartz.save(Diferencia, type = "png", device = dev.cur(), dpi = 72)
quartz(Diferencia, type = "png", device = dev.cur(), dpi = 72)
savePlot(filename = paste0("Rplot.", type),
type = c("png", "jpeg", "tiff", "bmp"),
device = dev.cur())
x11()
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="sin tendencia")
plot(diff(chicken), type="o", main="Primera Diferencia")
dev.copy(png,'myplot.png')
dev.off()
dev.copy(png,'myplot.png')
dev.off()
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="sin tendencia")
plot(diff(chicken), type="o", main="Primera Diferencia")
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="sin tendencia")
plot(diff(chicken), type="o", main="Primera Diferencia")
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="sin tendencia")
plot(diff(chicken), type="o", main="Primera Diferencia")
library(reticulate)
#use_condaenv(condaenv = "base", conda = "/opt/anaconda3/lib/")
use_python("/opt/anaconda3/lib/python3.8")
systema<-import(sys)
library(reticulate)
#use_condaenv(condaenv = "base", conda = "/opt/anaconda3/lib/")
use_python("/opt/anaconda3/lib/python3.8")
systema<-import("sys")
library(reticulate)
#use_condaenv(condaenv = "base", conda = "/opt/anaconda3/lib/")
use_python("/opt/anaconda3/lib/python3.8")
pandas<-import("pandas")
library(reticulate)
#use_condaenv(condaenv = "base", conda = "/opt/anaconda3/lib/")
use_python("/usr/local/bin/python")
#use_python("/opt/anaconda3/lib/python3.8")
pandas<-import("pandas")
library(reticulate)
#use_condaenv(condaenv = "base", conda = "/opt/anaconda3/lib/")
use_python("/usr/local/bin/python")
#use_python("/opt/anaconda3/lib/python3.8")
#pandas<-import("pandas")
reticulate::repl_python()
ts.index
reticulate::repl_python()
reticulate::repl_python()
